# champ   <- pull(df[1, ], champ  )
# statut  <- pull(df[1, ], statut )
# annee   <- pull(df[1, ], annee  )
# periode <- pull(df[1, ], periode)
# ipe     <- pull(df[1, ], ipe    )
df
}
library(tidyverse)
df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv')
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv(filepath, name_repair = name_repair)
(
df
|> rename(
champ = Champ,
statut = Statut,
annee = Annee,
periode = Period,
ipe = IPE
)
) -> df
#
# champ   <- pull(df[1, ], champ  )
# statut  <- pull(df[1, ], statut )
# annee   <- pull(df[1, ], annee  )
# periode <- pull(df[1, ], periode)
# ipe     <- pull(df[1, ], ipe    )
df
}
library(tidyverse)
df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv')
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv(filepath, name_repair = name_repair)
(
df
|> rename(
champ = Champ,
statut = Statut,
annee = Annee,
periode = Period,
ipe = IPE
)
) -> df
#
# champ   <- pull(df[1, ], champ  )
# statut  <- pull(df[1, ], statut )
# annee   <- pull(df[1, ], annee  )
# periode <- pull(df[1, ], periode)
# ipe     <- pull(df[1, ], ipe    )
df
}
library(tidyverse)
df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv')
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv(filepath, name_repair = name_repair)
# (
#   df
#   |> rename(
#     champ = Champ,
#     statut = Statut,
#     annee = Annee,
#     periode = Period,
#     ipe = IPE
#   )
# ) -> df
#
# champ   <- pull(df[1, ], champ  )
# statut  <- pull(df[1, ], statut )
# annee   <- pull(df[1, ], annee  )
# periode <- pull(df[1, ], periode)
# ipe     <- pull(df[1, ], ipe    )
df
}
library(tidyverse)
df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv')
df
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv2(filepath, name_repair = name_repair)
(
df
|> rename(
champ = Champ,
statut = Statut,
annee = Annee,
periode = Period,
ipe = IPE
)
) -> df
champ   <- pull(df[1, ], champ  )
statut  <- pull(df[1, ], statut )
annee   <- pull(df[1, ], annee  )
periode <- pull(df[1, ], periode)
ipe     <- pull(df[1, ], ipe    )
}
library(tidyverse)
df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv')
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv2(filepath, name_repair = name_repair)
(
df
|> rename(
champ = Champ,
statut = Statut,
annee = Annee,
periode = Period,
ipe = IPE
)
) -> df
champ   <- pull(df[1, ], champ  )
statut  <- pull(df[1, ], statut )
annee   <- pull(df[1, ], annee  )
periode <- pull(df[1, ], periode)
ipe     <- pull(df[1, ], ipe    )
df
}
library(tidyverse)
df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv')
df
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv2(filepath, name_repair = name_repair)
(
df
|> rename(
champ = Champ,
statut = Statut,
annee = Annee,
periode = Period,
ipe = IPE
)
|> mutate(
champ = tolower(champ)
)
) -> df
champ   <- pull(df[1, ], champ  )
statut  <- pull(df[1, ], statut )
annee   <- pull(df[1, ], annee  )
periode <- pull(df[1, ], periode)
ipe     <- pull(df[1, ], ipe    )
df
}
library(tidyverse)
df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv')
df
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv2(filepath, name_repair = name_repair)
(
df
|> rename(
champ = Champ,
statut = Statut,
annee = Annee,
periode = Period,
ipe = IPE
)
|> mutate(
champ = tolower(champ)
statut = ifelse(statut == "PUBLIC", "dgf", "oqn")
library(tidyverse)
(df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv'))
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv2(filepath, name_repair = name_repair)
(
df
|> rename(
champ = Champ,
statut = Statut,
annee = Annee,
periode = Period,
ipe = IPE
)
|> mutate(
champ = tolower(champ)
statut = ifelse(statut == "PUBLIC", "dgf", "oqn")
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv2(filepath, name_repair = name_repair)
(
df
|> rename(
champ = Champ,
statut = Statut,
annee = Annee,
periode = Period,
ipe = IPE
)
|> mutate(
champ = tolower(champ),
statut = ifelse(statut == "PUBLIC", "dgf", "oqn")
)
) -> df
champ   <- pull(df[1, ], champ  )
statut  <- pull(df[1, ], statut )
annee   <- pull(df[1, ], annee  )
periode <- pull(df[1, ], periode)
ipe     <- pull(df[1, ], ipe    )
df
}
library(tidyverse)
(df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv'))
#' @export
prepare_raw_key_value_4_db <- function(filepath) {
df <- read_csv2(filepath, name_repair = name_repair)
(
df
|> rename(
champ = Champ,
statut = Statut,
annee = Annee,
periode = Period,
ipe = IPE
)
|> mutate(
champ = tolower(champ),
statut = ifelse(statut == "PUBLIC", "dgf", "oqn")
)
) -> df
champ   <- pull(df[1, ], champ  )
statut  <- pull(df[1, ], statut )
annee   <- pull(df[1, ], annee  )
periode <- pull(df[1, ], periode)
ipe     <- pull(df[1, ], ipe    )
filename <- paste(champ, statut, annee, periode, "KV", csv, sep = ".")
write_csv(df,
pasteo( "/ovalide_data/upload/", filename))
}
library(tidyverse)
(df <- prepare_raw_key_value_4_db('~/Apps/tmp/appli_09.csv'))
keyboardShortcutAddin:::switch_between_projects()
file_move("tests/interactive/db_updater_create_file.R", "tests/interactive/db_updater_zip_ovalide_upload.R")
edit_file("tests/interactive/db_updater_key_value.R")
edit_file("tests/interactive/db_updater_zip_ovalide_upload.R")
edit_file("tests/interactive/db_updater_key_value.R")
edit_file("tests/interactive/db_updater_zip_ovalide_upload.R")
edit_file("tests/interactive/db_updater_key_value.R")
file_delete(path = "tests/interactive/db_updater_key_value.R")
edit_file("db_updater/dispatcher.R")
edit_file("app/logic/db_utils.R")
?zip
?file.copy
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::cd_to_sub()
cd("./draft/updateDBnewColumn/")
edit_file("R/script.R")
?dbCreateTable
new_df <- data.frame(
y = 3,
z = 4,
t = 10
)
setdiff(names(new_df), cols)
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
?ifelse
purrr::pmap(types, add_col)
purrr::pmap(types, add_col)
setwd("~")
proj_add("Analyses/Repart_internat/")
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
edit_file("R/explore.R")
library(tidyverse)
library(readxl)
library(readxl)
read_excel("./data/Amiens/Amiens - Répartition_SPECIALITES_MAI_2023 maj au 09.03.23.xlsx")
read_excel("./data/Amiens/Amiens - Répartition_SPECIALITES_MAI_2023 maj au 09.03.23.xlsx",
sheet = 2)
read_excel("./data/Amiens/Amiens - Répartition_SPECIALITES_MAI_2023 maj au 09.03.23.xlsx",
sheet = 2,
skip = 6)
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
Fich
keyboardShortcutAddin:::switch_between_projects()
(
"./data/Amiens/Amiens - Répartition_SPECIALITES_MAI_2023 maj au 09.03.23.xlsx"
|>  read_excel(sheet = 2, skip = 6)
)
library(tidyverse)
library(readxl)
(
"./data/Amiens/Amiens - Répartition_SPECIALITES_MAI_2023 maj au 09.03.23.xlsx"
|>  read_excel(sheet = 2, skip = 6)
)
(
"data/Amiens/Amiens - Tableau de répartition Dr JUNIOR MAI 2023 au 10.02.2023.xlsx"
|>  read_excel(sheet = 1, skip = 2)
)
(
"data/Amiens/Amiens - Tableau de répartition Dr JUNIOR MAI 2023 au 10.02.2023.xlsx"
|>  read_excel(sheet = 1, skip = 1)
)
(
"data/Amiens/Amiens - Tableau de répartition Dr JUNIOR MAI 2023 au 10.02.2023.xlsx"
|>  read_excel(sheet = 1, skip = 1)
) -> df
colnames(df)
cols <- colnames(df)
cols <- colnames(df)
col_values <- function(col) { unique(df[[col]]) }
map(cols, col_values)
(
"data/Amiens/Amiens - Tableau de répartition Dr JUNIOR MAI 2023 au 10.02.2023.xlsx"
|>  read_excel(sheet = 1, skip = 1)
) -> df
df
((
"data/Amiens/Amiens - Tableau de répartition Dr JUNIOR MAI 2023 au 10.02.2023.xlsx"
|>  read_excel(sheet = 1, skip = 1)
) -> df)
((
"data/Amiens/Amiens - Tableau de répartition Dr JUNIOR MAI 2023 au 10.02.2023.xlsx"
|>  read_excel(sheet = 1, skip = 1)
) -> df)
(
df
|> select(2, 4, 5)
)
(
df
|> select(2, 4, 5)
|> arrange(2, 3, 1)
)
(
df
|> select(2, 4, 5)
|> arrange(`NOM DE L'ETABLISSEMENT`,
`NOM DU SERVICE`,
`SPECIALITE (DES/DESC)`)
)
(
df
|> select(2, 4, 5)
|> arrange(`NOM DE L'ETABLISSEMENT`,
`NOM DU SERVICE`,
`SPECIALITE (DES/DESC)`)
) |> print(n = Inf)
(
df
|> select(2, 4, 5)
|> arrange(`NOM DE L'ETABLISSEMENT`,
`NOM DU SERVICE`,
`SPECIALITE (DES/DESC)`)
) |> pinf()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
edit_file("app/logic/db_utils.R")
q()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
edit_file("db_updater/db_updater_utils.R")
edit_file("db_updater/dispatcher.R")
edit_file("db_updater/probe_dir.R")
edit_file("db_updater/db_updater_utils.R")
edit_file("../../Apps/draft/updateDBnewColumn/R/script.R")
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::switch_between_projects()
file_delete("app/logic/ovalide_utils.R")
keyboardShortcutAddin:::switch_between_projects()
library(tidyverse)
read_csv2("appli_09.csv")
read_csv2("appli_09.csv", locale = locale(encoding = "UTF-8"))
read_csv2("appli_09.csv", locale = locale(encoding = "UTF-8"))
file_move("appli_09.csv", "R/")
q()
keyboardShortcutAddin:::switch_between_projects()
edit_file("R/script.R")
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./draft/")
dir_create("quietSO")
keyboardShortcutAddin:::cd_to_sub()
cd("./quietSO/")
## R/foo.r
foo <- function() {
message("This is a message")
warning("This is a warning")
"This is a result"
}
test_that("foo works", {
expect_equal(foo(), "This is a result")
expect_message(foo(), "This is a message")
expect_warning(foo(), "This is a warning")
})
## R/foo.r
library(testthat)
test_that("foo works", {
expect_equal(foo(), "This is a result")
expect_message(foo(), "This is a message")
expect_warning(foo(), "This is a warning")
})
test_that("foo works", {
expect_warning(
expect_message(foo(), "This is a message"),
"This is a warning"
)
expect_equal(
suppressWarnings(suppressMessages(foo())),
"This is a result"
)
})
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
edit_file("tests/interactive/db_updater_file_upload.R")
?cols
?readr::cols
keyboardShortcutAddin:::switch_between_projects()
shiny::runApp()
edit_file("tests/interactive/print_user.R")
edit_file("tests/interactive/db_updater_file_upload.R")
edit_file("tests/interactive/print_user.R")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
edit_file("tests/interactive/db_updater_file_upload.R")
shiny::runApp(launch.browser = T)
setwd("~")
source("INSTALL_MY_PACKAGES.R")
source("INSTALL_MY_PACKAGES.R")
source("INSTALL_MY_PACKAGES.R")
getwd()
source("INSTALL_MY_PACKAGES.R")
q()
source("INSTALL_MY_PACKAGES.R")
source("INSTALL_MY_PACKAGES.R")
keyboardShortcutAddin:::cd_to_sub()
cd("./Apps/draft/EndToEndTests/")
rhino::test_e2e()
rhino::test_e2e()
shiny::runApp()
rhino::test_e2e()
rhino::test_e2e(interactive = T)
clipr::dr_clipr()
q()
edit_file("app/main.R")
edit_file("tests/interactive/db_updater_file_upload.R")
shiny::runApp(launch.browser = T)
filemane
filename
system("pwd")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
filename
system("pwd")
system("id -u")
shiny::runApp(launch.browser = T)
filename
input$upload$datapath
system("ls /tmp/Rtmpm6mixD/a991402e757e6e335f343590/0.zip ")
system("ls /tmp/Rtmpm6mixD/a991402e757e6e335f343590/0.zip -al")
file.copy(input$upload$datapath, filename)
shiny::runApp(launch.browser = T)
Sys.getenv("RUN_IN_RSTUDIO")
edit_file("app/main.R")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
edit_file("tests/interactive/cy_db_updater_new_column.R")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
edit_file("app/logic/db_utils.R")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
db_name
db
shiny::runApp(launch.browser = T)
Sys.getenv("DB_HOST")
Sys.getenv("DB_PORT")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
Sys.getenv("RUN_IN_DOCKER")
host
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
?str
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
?purrr::walk
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
?file.remove
shiny::runApp(launch.browser = T)
paste0(tempdir(), runif(1))
shiny::runApp(launch.browser = T)
?runif
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
edit_file("tests/cypress/integration/db_updater_file_upload.spec.js")
q()

renv::install("pietrodito/rstudio-projects/my_packages/tabulatorr")
renv::snapshot(])
renv::snapshot()
renv::status()
tabulatorr::debug()
shiny::runApp()
keyboardShortcutAddin:::switch_between_projects()
shiny::runApp()
keyboardShortcutAddin:::switch_between_projects()
tabulatorr::tabulator(mtcars)
file.edit("R/tabulator.R")
file.edit("tests/testthat/test-tabulator.R")
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
simple_example          <- function() {
tabulator(mtcars, autoColumns = TRUE)
}; run(simple_example)
example_with_parameters <- function() {
tabulator(mtcars,
height = FALSE,
columns = list(
list(title = "MPG", field = "mpg"),
list(title = "CYL", field = "cyl")
))
}; run(example_with_parameters)
shiny_example    <- function() {
minimal_shiny_ui_server_GlobalEnv()
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(shiny_example)
module_example   <- function() {
tabUI <- function(id) {
ns <- NS(id)
tagList(
tabulatorOutput(ns("tab"), height = NULL)
)
}
tabServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$tab <- renderTabulator(
tabulator(mtcars,
layout = "fitColumns",
autoColumns = TRUE)
)
}
)
}
ui <- fluidPage(
tabUI("tab")
)
server <- function(input, output, session) {
tabServer("tab")
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(module_example)
testthat::test_package()
devtools::test()
keyboardShortcutAddin:::switch_between_projects()
tabulatorr::tabulator(mtcars)
tabulatorr::tabulator(mtcars)
file.edit("tests/testthat/test-tabulator.R")
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
load_all()
load_all()
library(shiny)
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
simple_example          <- function() {
tabulator(mtcars, autoColumns = TRUE)
}; run(simple_example)
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
simple_example          <- function() {
tabulator(mtcars, autoColumns = TRUE)
}; run(simple_example)
getwd()
ls
keyboardShortcutAddin:::list_files_pwd()
setwd("Analyses/")
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::cd_to_parent_dir()
dir.create("JS_for_R")
keyboardShortcutAddin:::cd_to_sub()
cd("./JS_for_R/")
usethis::create_package("playground")
keyboardShortcutAddin:::switch_between_projects()
build_package("")
tabulator(mtcats)
tabulator(mtcars)
tabulator(mtcars, autoColumns = TRUE)
tabulatorr::debug("asdf")
tabulatorr::debug()
devtools::check()
devtools::test()
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
simple_example          <- function() {
tabulator(mtcars, autoColumns = TRUE)
}; run(simple_example)
simple_example          <- function() {
tabulator(mtcars, autoColumns = TRUE)
}; run(simple_example)
?run
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::cd_to_sub()
cd("./rstudio/")
keyboardShortcutAddin:::cd_to_sub()
cd("./JS_for_R/")
devtools::create("albator")
keyboardShortcutAddin:::cd_to_sub()
cd("./albator/")
build_package("")
devtools::load_all()
htmlwidgets::scaffoldWidget("albator")
load_all()
albator()
albator("asdf")
file.edit("~/my_packages/tabulatorr/inst/htmlwidgets/tabulator.yaml")
load_all()
albator(mtcars)
load_all()
albator(mtcars)
load_all()
albator(mtcars)
albator(mtcars, autoColumns = TRUE)
albator(mtcars, autoColumns = TRUE)
albator(mtcars, autoColumns = TRUE)
mtcars
load_all()
load_all()
albator(mtcars)
albator(mtcars, autoColumns = TRUE)
albator(mtcars, autoColumns = TRUE)
load_all()
albator(mtcars, autoColumns = TRUE)
albator(mtcars)
albator(mtcars)
albator(mtcars)
albator(mtcars)
albator(mtcars, autoColumns = TRUE)
albator(mtcars, autoColumns = TRUE)
albator(mtcars, autoColumns = TRUE)
usethis::create_package("peity")
keyboardShortcutAddin:::switch_between_projects()
albator(mtcars, autoColumns = TRUE)
keyboardShortcutAddin:::cd_to_sub()
cd("./JS_for_R/")
ls
keyboardShortcutAddin:::list_files_pwd()
devtools::create("albator")
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::cd_to_sub()
cd("./albator/")
keyboardShortcutAddin:::switch_between_projects()
devtools::load_all()
tabulator(mtcars)
tabulator(mtcars, autoColumns = TRUE)
tabulator(mtcars, autoColumns = TRUE)
file.edit("inst/htmlwidgets/tabulator.js")
tabulator(mtcars, autoColumns = TRUE)
devtools::load_all()
tabulator(mtcars, autoColumns = TRUE)
tabulator(mtcars, autoColumns = TRUE)
devtools::load_all()
tabulator(mtcars, autoColumns = TRUE)
file.edit("tests/testthat/test-tabulator.R")
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
simple_example          <- function() {
tabulator(mtcars, autoColumns = TRUE)
}; run(simple_example)
example_with_parameters <- function() {
tabulator(mtcars,
height = FALSE,
columns = list(
list(title = "MPG", field = "mpg"),
list(title = "CYL", field = "cyl")
))
}; run(example_with_parameters)
shiny_example    <- function() {
minimal_shiny_ui_server_GlobalEnv()
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(shiny_example)
shiny_example    <- function() {
minimal_shiny_ui_server_GlobalEnv()
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(shiny_example)
module_example   <- function() {
tabUI <- function(id) {
ns <- NS(id)
tagList(
tabulatorOutput(ns("tab"), height = NULL)
)
}
tabServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$tab <- renderTabulator(
tabulator(mtcars,
layout = "fitColumns",
autoColumns = TRUE)
)
}
)
}
ui <- fluidPage(
tabUI("tab")
)
server <- function(input, output, session) {
tabServer("tab")
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(module_example)
cell_click_event <- function() {
enrich_minimal_server <<- function(input) {
observeEvent(input$table_cell_clicked, {
req(input$table_cell_clicked)
str(input$table_cell_clicked)
})
}
minimal_shiny_ui_server_GlobalEnv()
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(cell_click_event)
load_all()
cell_click_event <- function() {
enrich_minimal_server <<- function(input) {
observeEvent(input$table_cell_clicked, {
req(input$table_cell_clicked)
str(input$table_cell_clicked)
})
}
minimal_shiny_ui_server_GlobalEnv()
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(cell_click_event)
grouped_cols     <- function() {
minimal_shiny_ui_server_GlobalEnv()
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
height = FALSE,
columns = list(
list(title = "A",
columns = list(
list(title = "THIS", field = "This"),
list(title = "IS", field = "is"))),
list(title = "B",
columns = list(
list(title = "A", field = "a"),
list(title = "TEST", field = "test")))
)
)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(grouped_cols)
cell_context_menu <- function() {
minimal_shiny_ui_server_GlobalEnv()
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
mtcars,
columns = list(list(title = "MPG", field = "mpg")),
cellContextMenuItems  = letters[1:3]
)
})
observeEvent(input$table_context_menu_a, {
req(input$table_context_menu_a)
str(input$table_context_menu_a)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(cell_context_menu)
load_all()
cell_context_menu <- function() {
minimal_shiny_ui_server_GlobalEnv()
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
mtcars,
columns = list(list(title = "MPG", field = "mpg")),
cellContextMenuItems  = letters[1:3]
)
})
observeEvent(input$table_context_menu_a, {
req(input$table_context_menu_a)
str(input$table_context_menu_a)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(cell_context_menu)
cell_context_menu_with_autoColumns <- function() {
minimal_shiny_ui_server_GlobalEnv()
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
mtcars,
autoColumns = TRUE,
headerMenuItems = letters[24:26],
cellContextMenuItems  = letters[1:3]
)
})
observeEvent(input$table_context_menu_a, {
req(input$table_context_menu_a)
str(input$table_context_menu_a)
})
observeEvent(input$table_header_menu_x, {
req(input$table_header_menu_x)
str(input$table_header_menu_x)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(cell_context_menu_with_autoColumns)
load_all()
cell_context_menu_with_autoColumns <- function() {
minimal_shiny_ui_server_GlobalEnv()
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
mtcars,
autoColumns = TRUE,
headerMenuItems = letters[24:26],
cellContextMenuItems  = letters[1:3]
)
})
observeEvent(input$table_context_menu_a, {
req(input$table_context_menu_a)
str(input$table_context_menu_a)
})
observeEvent(input$table_header_menu_x, {
req(input$table_header_menu_x)
str(input$table_header_menu_x)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(cell_context_menu_with_autoColumns)
reactive_value <- function() {
ui <- fluidPage(
selectInput("data", "Choose", c("mtcars", "faithful")),
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(get(input$data),
layout = "fitColumns",
autoColumns = TRUE)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(reactive_value)

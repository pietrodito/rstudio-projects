?filter
(
bt
|> filter(name = "impossible_name_doj10342ruewos")
)
library(jsonlite)
library(DBI)
library(dplyr)
host     <- "localhost"
port     <- "5432"
user     <- "postgres"
password <- "postgres"
tryCatch(
{
dbConnect(Postgres(),
host     = host    ,
port     = port    ,
user     = user    ,
password = password,
dbname  = db_name(nature))
},
error = function(cond) {
message("Unable to connect to db:")
message(cond |> conditionMessage())
NULL
}
) -> db
library(jsonlite)
library(DBI)
library(dplyr)
host     <- "localhost"
port     <- "5432"
user     <- "postgres"
password <- "postgres"
tryCatch(
{
dbConnect(Postgres(),
host     = host    ,
port     = port    ,
user     = user    ,
password = password,
dbname  = "MCO_DGF")
},
error = function(cond) {
message("Unable to connect to db:")
message(cond |> conditionMessage())
NULL
}
) -> db
bt <- tbl(db, "build_tables")
db
bt <- tbl(db, "build_tables")
(
bt
|> filter(name = "impossible_name_doj10342ruewos")
)
(
bt
|> filter(name == "impossible_name_doj10342ruewos")
)
(
bt
)
(
bt
|> collect()
)
(
bt
)
l <- list(letters)
(l <- list(letters))
row <- map(letters, identity())
row <- map(letters, identity)
library(purrr)
row <- map(letters, identity)
(l <- (letters))
(l <- map(letters, identity))
serializeJSON(l)
serializeJSON(l) |> as.character()
serializeJSON(l) |> as.character() |> unserializeJSON()
serializeJSON(l) |> as.character() |> unserializeJSON()
(
l
|> serializeJSON(l)
|> as.character()
|> unserializeJSON()
)
(
|> serializeJSON(l)
(
l
|> serializeJSON()
|> as.character()
|> unserializeJSON()
|> identical(l)
)
(bt <- tbl(db, "build_tables"))
row <- data.frame(
name = "x",
details = serializeJSON(l)
)
rows_upsert(
bt,
row,
by = "name"
)
rows_upsert(
bt,
row,
by = "name",
in_place = TRUE
)
rows_upsert(
bt,
row,
by = "name",
in_place = TRUE,
copy = TRUE
)
q <- dbGetQuery(db, "SELECT * FROM build_table;")
q <- dbGetQuery(db, "SELECT * FROM build_tables;")
q
q[1, 1]
q[1, 2]
unserializeJSON(q[1, 2])
shiny::runApp(launch.browser = T)
query_result
shiny::runApp(launch.browser = T)
unserializeJSON(query_result[1, 2])
file.edit("tests/console/")
file.edit("tests/console/JSON_in_DB.R")
q <- dbGetQuery(db, "SELECT * FROM build_tables;")
q <- dbGetQuery(db, "SELECT * FROM build_tables;")
shiny::runApp(launch.browser = T)
query_result[1, 1]
unserializeJSON(query_result[1, 1])
dbExecute(db, "DELETE FROM build_tables;")
dbExecute(db, "DELETE FROM build_tables;")
DBI::dbExecute(db, "DELETE FROM build_tables;")
library(jsonlite)
library(DBI)
library(dplyr)
library(purrr)
host     <- "localhost"
port     <- "5432"
user     <- "postgres"
password <- "postgres"
tryCatch(
{
dbConnect(Postgres(),
host     = host    ,
port     = port    ,
user     = user    ,
password = password,
dbname  = "MCO_DGF")
},
error = function(cond) {
message("Unable to connect to db:")
message(cond |> conditionMessage())
NULL
}
) -> db
(bt <- tbl(db, "build_tables"))
(l <- map(letters, identity))
row <- data.frame(
name = "x",
details = serializeJSON(l)
)
rows_upsert(
bt,
row,
by = "name",
in_place = TRUE,
copy = TRUE
)
q <- dbGetQuery(db, "SELECT * FROM build_tables;")
library(jsonlite)
library(DBI)
library(dplyr)
library(purrr)
host     <- "localhost"
port     <- "5432"
user     <- "postgres"
password <- "postgres"
tryCatch(
{
dbConnect(Postgres(),
host     = host    ,
port     = port    ,
user     = user    ,
password = password,
dbname  = "MCO_DGF")
},
error = function(cond) {
message("Unable to connect to db:")
message(cond |> conditionMessage())
NULL
}
) -> db
(bt <- tbl(db, "build_tables"))
(l <- map(letters, identity))
row <- data.frame(
name = "x",
details = serializeJSON(l)
)
rows_upsert(
bt,
row,
by = "name",
in_place = TRUE,
copy = TRUE
)
q <- dbGetQuery(db, "SELECT * FROM build_tables;")
DBI::dbExecute(db, "DELETE FROM build_tables;")
q <- dbGetQuery(db, "SELECT * FROM build_tables;")
q
shiny::runApp(launch.browser = T)
library(jsonlite)
library(DBI)
library(dplyr)
library(purrr)
host     <- "localhost"
port     <- "5432"
user     <- "postgres"
password <- "postgres"
tryCatch(
{
dbConnect(Postgres(),
host     = host    ,
port     = port    ,
user     = user    ,
password = password,
dbname  = "MCO_DGF")
},
error = function(cond) {
message("Unable to connect to db:")
message(cond |> conditionMessage())
NULL
}
) -> db
(bt <- tbl(db, "build_tables"))
(l <- map(letters, identity))
row <- data.frame(
name = "x",
details = serializeJSON(l)
)
q <- dbGetQuery(db, "SELECT * FROM build_tables;")
library(jsonlite)
library(DBI)
library(dplyr)
library(purrr)
host     <- "localhost"
port     <- "5432"
user     <- "postgres"
password <- "postgres"
tryCatch(
{
dbConnect(Postgres(),
host     = host    ,
port     = port    ,
user     = user    ,
password = password,
dbname  = "MCO_DGF")
},
error = function(cond) {
message("Unable to connect to db:")
message(cond |> conditionMessage())
NULL
}
) -> db
library(RPostgres)
tryCatch(
{
dbConnect(Postgres(),
host     = host    ,
port     = port    ,
user     = user    ,
password = password,
dbname  = "MCO_DGF")
},
error = function(cond) {
message("Unable to connect to db:")
message(cond |> conditionMessage())
NULL
}
) -> db
(bt <- tbl(db, "build_tables"))
q <- dbGetQuery(db, "SELECT * FROM build_tables;")
q
unserializeJSON(q[1, 2])
shiny::runApp(launch.browser = T)
query_result
unserializeJSON(query_result[1,1])
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r$table_name
r$nature
load_build_table_details(r$nature, r$table_name)
file.edit("~/Apps/draft/old/DILAVO-archive/main/R/tableDesignerServer.R")
file.edit("~/Apps/draft/old/DILAVO-archive/ovalide/R/formatting_class.R")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r$new
j
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r$edit_mode
r$new
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
file.edit("app/view/table_builder.R")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
file.edit("app/logic/db_utils.R")
shiny::runApp(launch.browser = T)
file.edit("app/logic/table_builder_utils.R")
shiny::runApp(launch.browser = T)
file.edit("app/logic/db_utils.R")
245gg
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
input$selected_name
input
input$redo
`$`
input$selected_name
r$table_name
input$selected_name
r$table_name
r$table_name
r$table_name
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r$table_name
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
modal_is_on()
modal_is_on()
modal_is_on()
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
file.edit("tests/interactive/table_builder_interact.R")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
file.edit("tests/interactive/cy_db_updater_new_column.R")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
file.edit("app/view/builder_details/description.R")
file.edit("app/view/builder_details/description.R")
shiny::runApp(launch.browser = T)
file.edit("app/view/builder_details/description.R")
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
details
details
details$description
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
details$description
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r$nature
input$edit_name
details
input$edit_name
details
r$nature
input$edit_name
r$table_name
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r$build_table
r$nature
build_tables(r$nature)
r$build_tables
shiny::runApp(launch.browser = T)
r$build_tables
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r$table_name
input$selected_name
shiny::runApp(launch.browser = T)
r$table_name
r$table_name
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
nn
output$table_name
output$table_name
input$selected_name
output$table_name
r$build_tables
r$table_name
r$table_name
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
non_reactive_details
non_reactive_details$x
details
details$description
non_reactive_details
details$description
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r
r$table_name
input$selected_name
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r$table_name
r$table_name
r$build_tables
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
r$table_name
r$table_name
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
file.edit("app/view/table_builder.R")
shiny::runApp(launch.browser = T)
setwd("~/")
file.edit("INSTALL_MY_PACKAGES.R")
q()

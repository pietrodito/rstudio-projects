run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
load_all()
}
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
load_all()
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
build_package("")
build_package("")
build_package("")
build_package("")
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
load_all()
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
load_all()
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
load_all()
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
load_all()
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
load_all()
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed_data, {
req(input$table_row_selection_changed_data)
str(input$table_row_selection_changed_data)
})
observeEvent(input$table_row_selection_changed_row_positions, {
req(input$table_row_selection_changed_row_positions)
str(input$table_row_selection_changed_row_positions)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
load_all()
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed_data, {
req(input$table_row_selection_changed_data)
str(input$table_row_selection_changed_data)
})
observeEvent(input$table_row_selection_changed_row_positions, {
req(input$table_row_selection_changed_row_numbers)
str(input$table_row_selection_changed_row_numbers)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed_data, {
req(input$table_row_selection_changed_data)
str(input$table_row_selection_changed_data)
})
observeEvent(input$table_row_selection_changed_row_numbers, {
req(input$table_row_selection_changed_row_numbers)
str(input$table_row_selection_changed_row_numbers)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
build_package("")
build_package("")
keyboardShortcutAddin:::switch_between_projects()
shiny::runApp()
shiny::runApp()
renv::update()
renv::update("pietrodito/rstudio-projects/my_packages/tabulatorr")
renv::rebuild()
eptions(repos="http://cran.rstudio.com/")
options(repos="http://cran.rstudio.com/")
Sys.setenv("RENV_CONFIG_REPOS_OVERRIDE" = "http://cran.rstudio.com")
renv::rebuild()
renv::rebuild()
renv::rebuild()
renv::rebuild(prompt = F)
keyboardShortcutAddin:::switch_between_projects()
renv::rebuild(prompt = F)
shiny::runApp()
file.edit("renv/library/R-4.3/x86_64-pc-linux-gnu/tabulatorr/htmlwidgets/tabulator.js")
renv::rebuild("tabulatorr")
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
shiny::runApp()
renv::rebuild("tabulatorr")
file.edit("renv/library/R-4.3/x86_64-pc-linux-gnu/tabulatorr/htmlwidgets/tabulator.js")
source("~/INSTALL_MY_PACKAGES.R", echo=TRUE)
keyboardShortcutAddin:::switch_between_projects()
renv::update()
renv::update("tabulatorr")
renv::update("tabulatorr")
renv::restore()
keyboardShortcutAddin:::cd_to_parent_dir()
setwd("..")
consoleR::install_my_packages_inside_rhino("dilavo/")
purrr::walk(fs::dir_ls("~/my_packages/RStudio-tools"), ~ renv::install(.))
renv::update("tabulatorr")
shiny::runApp()
file.edit("renv/library/R-4.3/x86_64-pc-linux-gnu/tabulatorr/htmlwidgets/tabulator.js")
keyboardShortcutAddin:::switch_between_projects()
file.edit("tests/interactive/monthly_activity.R")
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::cd_to_sub()
cd("./tests/interactive/")
dir_create("old")
file_move("monthly_activity.R", "old/")
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::switch_between_projects()
renv::status()
renv::snapshot()
renv::status()
renv::snapshot()
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::cd_to_sub()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tbl(db_instant_connect(nature()), "t1d2cmr_1")
tbl(db_instant_connect(nature()), "asdf")
shiny::runApp()
shiny::runApp()
shiny::runApp()
tbl_if_exists(nature(), "t1d2cm")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ghms()
ghm_etab_period(finess())
finess()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
T1D2CMR_1
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
file.edit("app/logic/nature_utils.R")
paste0(letters[1], "_", letters[3])
shiny::runApp()
shiny::runApp()
shiny::runApp()
nature
nature
nature
nature
nature
nature
nature
nature
nature
nature
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
file.edit("tests/interactive/reset_db.R")
shiny::runApp()
file.edit("app.R")
file.edit("app/main.R")
shiny::runApp()
shiny::runApp(options = list(launch.browser = T))
shiny::runApp()
file.edit("tests/interactive/")
file.edit("tests/interactive/monthly_activity.R")
file.edit("tests/interactive/reset_db.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
file.edit("tests/interactive/old/monthly_activity.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
finess()
ghm_etab_period(finess())
tabulator(ghm_etab_period(finess()))
ghm_etab_period(finess())
shiny::runApp()
shiny::runApp()
shiny::runApp()
most_recent_year(nature())
most_recent_period(nature())
ghm_etab_period(NULL, NULL, NULL)
ghm_etab_year_period(NULL, NULL, NULL)
shiny::runApp()
shiny::runApp()

microbenchmark(hospitals(), times = 1000)
library(ovaliDB)
my_hospitals <- function() {
query <- glue(
'SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
ORDER BY ipe
;'
)
dbGetQuery(draft, query)
}
my_hospitals()
microbenchmark(hospitals(), times = 10)
hospitals()
ovaliDB::hospitals()
ovaliDB::hospitals(nature())
microbenchmark(hospitals(), ovaliDB::hospitals(nature()), times = 10)
my_hospitals <- function() {
query <- glue(
'SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = {other_year()}
ORDER BY ipe
;'
)
dbGetQuery(draft, query)
}
my_hospitals()
my_hospitals <- function() {
query <- glue(
'SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
;'
)
dbGetQuery(draft, query)
}
my_hospitals()
microbenchmark(hospitals(), ovaliDB::hospitals(nature()), times = 10)
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- dbGetQuery(mco_dgf(), query)
year[1, 1]
}
my_hospitals <- function() {
query <- glue(
'SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
;'
)
dbGetQuery(mco_dgf(), query)
}
my_hospitals()
microbenchmark(hospitals(), ovaliDB::hospitals(nature()), times = 10)
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
dbGetQuery(mco_dgf(), query)
}
my_hospitals()
microbenchmark(hospitals(), ovaliDB::hospitals(nature()), times = 10)
my_hospitals()
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 10)
my_hospitals()
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 10)
my_hospitals <- function() {
query <- glue(
'
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
;'
)
dbGetQuery(mco_dgf(), query)
}
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 10)
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
dbGetQuery(mco_dgf(), query)
}
my_hospitals()
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 10)
tryCatch(
{
x <- "asdf"
}
)
x
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
year[1, 1]
}
other_year()
other_year <- function() {
query <- "SELECT max(annee) AS year FROM xxx;"
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
year[1, 1]
}
other_year()
other_year <- function() {
query <- "SELECT max(annee) AS year FROM xxx;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
other_year <- function() {
query <- "SELECT max(annee) AS year FROM xxx;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
microbenchmark(my_year(), other_year())
build_package("")
build_package("")
build_package("")
microbenchmark(my_year(), other_year(), most_recent_year())
{
library(ovaliDB)
box::use(../../app/logic/nature_utils [...])
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432"),
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
library(ovaliDB)
box::use(../../app/logic/nature_utils [...])
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
{
library(ovaliDB)
box::use(../../app/logic/nature_utils [...])
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb)
}
my_year <- function() {
temp_table <- basename(tempfile())
dbExecute(draft, glue(
"
create table {temp_table} as
select max(annee) as annee
from tdb;
"))
result <- dbReadTable(draft, temp_table)
dbExecute(draft, "drop table {temp_table}" |> glue())
result[1, 1]
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
microbenchmark(other_year(), most_recent_year())
microbenchmark(other_year(), most_recent_year(), times = 1000)
build_package("")
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb)
}
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb, overwrite = TRUE)
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
microbenchmark(other_year(), most_recent_year(), times = 1000)
microbenchmark(other_year(), most_recent_year(), times = 100)
db(nature())
build_package("")
build_package("")
build_package("")
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb, overwrite = TRUE)
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year()
db()
most_recent_year()
most_recent_year
microbenchmark(other_year(), most_recent_year(), times = 100)
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(), times = 100)
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
db(nature())
build_package("")
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb, overwrite = TRUE)
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
nature()
get(suffixe(nautre())
get(suffixe(nautre()))
get(suffixe(nature()))
get(suffixe(nature()))()
build_package("")
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb, overwrite = TRUE)
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
db
microbenchmark(get(suffixe(nature())))
microbenchmark(get(suffixe(nature())))
microbenchmark(get(suffixe(nature()))())
microbenchmark(mco_dgf())
microbenchmark(get(suffixe(nature())), mco_dgf())
microbenchmark(get(suffixe(nature())), mco_dgf())
microbenchmark(get(suffixe(nature())) |> tbl("tdb"), mco_dgf() |> tbl("tdb"))
get(suffixe(nature()))
get(suffixe(nature()))()
microbenchmark(get(suffixe(nature()))() |> tbl("tdb"), mco_dgf() |> tbl("tdb"))
microbenchmark(db(nature()), mco_dgf())
microbenchmark(db(nature()) |> tbl("tdb"), mco_dgf() |> tbl("tdb"))
microbenchmark(db(nature()) |> tbl("tdb") |> collect(),
mco_dgf()    |> tbl("tdb") |> collect())
microbenchmark(db(nature()) |> tbl("tdb") |> summarise(X = max(annee)) |> collect(),
mco_dgf()    |> tbl("tdb") |> summarise(X = max(annee)) |> collect())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(db(nature()),
mco_dgf()   )
microbenchmark(db(nature()),
mco_dgf()   )
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
dbGetQuery(mco_dgf(), query)
}
my_hospitals()
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 10)
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
load_all()
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
load_all()
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(db(nature()))
microbenchmark(get(suffixe(nature))())
microbenchmark(get(suffixe(nature()))())
microbenchmark(  box::use(
../../app/logic/nature_utils
[ suffixe,],
))
file.edit("R/nature.R")
getwd()
file.edit("../../app/logic/nature_utils.R")

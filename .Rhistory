|> str_remove("Adjustable gastric ")
|> str_remove("Gastric ")
|> str_remove(" gastrectomy")
)
}
(df$link_from <- simplify_labels(df$link_from))
(df$link_to   <- simplify_labels(df$link_to  ))
(nodes <- c(df$link_from, df$link_to) |> unique())
make_fct_then_int <- function(col) {
factor(col, levels = nodes) |> as.integer() - 1
}
lightgrey <- rgb(.75, .75, .75, .25)
red       <- rgb(  1,   0,   0, .25)
green     <- rgb(  0,   1,   0, .25)
blue      <- rgb(  0,   0,   1, .25)
((
target = df$link_to,
value = df$N
|> mutate(color = ifelse(str_detect(target, "No"), lightgrey,
(colors <- rep("white", 26))
update_node_colors <- function(pattern, color) {
colors[str_detect(nodes, pattern)] <<- color
}
update_node_colors("banding", blue)
update_node_colors("bypass", red)
update_node_colors("Sleeve", green)
update_node_colors("More", lightgrey)
update_node_colors("No", lightgrey)
fig <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
color = colors,
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = int_df
)
fig <- fig %>% layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
library(plotly)
library(tidyverse)
library(stringr)
(df_raw <- read_csv("data/bariatric_sankey.csv"))
link_step_gt_two <- function(link_to) {
gt_two <- function(x) { x > 2}
(
link_to
|> str_sub(1, 1)
|> gt_two()
)
}
(
df_raw
|> mutate(link_to = ifelse(link_step_gt_two(link_to),
"More than two surg.",
link_to),
link_to = ifelse(str_detect(link_to, "No more"),
"No more surg.",
link_to))
|> filter( ! link_step_gt_two(link_from))
) -> df
simplify_labels <- function(col) {
(
col
|> str_remove("Adjustable gastric ")
|> str_remove("Gastric ")
|> str_remove(" gastrectomy")
)
}
(df$link_from <- simplify_labels(df$link_from))
(df$link_to   <- simplify_labels(df$link_to  ))
(nodes <- c(df$link_from, df$link_to) |> unique())
make_fct_then_int <- function(col) {
factor(col, levels = nodes) |> as.integer() - 1
}
lightgrey <- rgb(.75, .75, .75, .25)
red       <- rgb(  1,   0,   0, .25)
green     <- rgb(  0,   1,   0, .25)
blue      <- rgb(  0,   0,   1, .25)
((
target = df$link_to,
((
tibble(
target = df$link_to,
source = make_fct_then_int(df$link_from),
value = df$N
)
|> mutate(color = ifelse(str_detect(target, "No"), lightgrey,
ifelse(str_detect(target, "bypass"), red,
ifelse(str_detect(target, "Sleeve"), green,
ifelse(str_detect(target, "banding"), blue,
lightgrey)))),
target = make_fct_then_int(df$link_to))
) -> int_df)
(colors <- rep("white", 26))
update_node_colors <- function(pattern, color) {
colors[str_detect(nodes, pattern)] <<- color
}
update_node_colors("banding", blue)
update_node_colors("bypass", red)
update_node_colors("Sleeve", green)
update_node_colors("More", lightgrey)
update_node_colors("No", lightgrey)
fig <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
color = colors,
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = int_df
)
fig <- fig %>% layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
HIGH_DETAILS <- F
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
q()
source("~/Analyses/ENRICCO_sankey/R/sankey.R", echo=TRUE)
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./newRhinoTest/")
q()
proj_remove()
proj_remove()
proj_remove()
proj_add("~/Apps/dilavo/")
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
renv::status()
q()
keyboardShortcutAddin:::switch_between_projects()
proj_remove()
proj_remove()
keyboardShortcutAddin:::switch_between_projects()
proj_add()
proj_remove()
proj_add("Apps/dilavo/")
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
edit_file("app/logic/db_utils.R")
renv::install("RPostgreSQL")
q()
renv::status()
renv::purge(package = "RPostgreSQL")
?uninstall
remove.packages("RPostgreSQL")
renv::clean()
edit_file('.Rprofile')
source("~/asdf")
renv::dependencies()
renv::diagnostics()
renv::update()
renv::clean()
renv::install()
renv::dependencies()
renv::repair()
renv::install("Rpostgres")
renv::install("RPostgres")
renv::snapshot()
renv::status()
renv::install("RPostgres")
renv::install("RPostgres")
renv::install("RPostgres")
renv::status()
renv::snapshot()
renv::repair()
renv::dependencies()
renv::repair()
renv::clean()
edit_file("app/logic/db_utils.R")
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
setwd("..")
ls
rhino::init("dependTest")
proj_add("dependTest/")
proj_add("dependTest/")
keyboardShortcutAddin:::switch_between_projects()
edit_file("dependencies.R")
getwd()
setwd("..")
q()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
proj_remove()
keyboardShortcutAddin:::switch_between_projects()
edit_file("dependencies.R")
rhino::pkg_install("RPostgres")
renv::status()
renv::repair()
renv::status()
renv::diagnostics()
renv::dependencies()
renv::dependencies()
edit_file("app/logic/db_utils.R")
rhino::pkg_install("jsonlite")
setwd("~/Apps/draft/")
setwd("~/Apps/draft/")
rhino::init("deployTest")
setwd("deployTest/")
shiny::runApp()
shiny::runApp()
getwd()
q()
q()
keyboardShortcutAddin:::cd_to_sub()
cd("./Apps/draft/")
install_my_packages_inside_rhino("dbConnect/")
renv::deactivate()
purrr::walk(fs::dir_ls("~/my_packages/"), ~ renv::install(.))
renv::activate()
keyboardShortcutAddin:::list_files_pwd()
..
q()
keyboardShortcutAddin:::cd_to_sub()
cd("./Apps/draft/")
rhino::init("deployTest")
install_my_packages_inside_rhino("deployTest/")
getwd()
setwd("..")
rhino::init("deployTest")
getwd()
install_my_packages_inside_rhino("deployTest/")
getwd()
install_my_packages_inside_rhino
q()
q()
keyboardShortcutAddin:::cd_to_sub()
cd("./Apps/draft/")
dir_delete("testDeploy/")
rhino::init("someDeploy")
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./draft")
keyboardShortcutAddin:::cd_to_sub()
cd("./someDeploy/")
install_my_packages_inside_rhino
purrr::walk(fs::dir_ls("~/my_packages/"), ~ renv::install(.))
q()
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::build_a_project()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::cd_to_sub()
cd("./Apps/draft/")
dir_delete("someDeploy")
rhino::init("someD")
getwd()
keyboardShortcutAddin:::list_files_pwd()
install_my_packages_inside_rhino("someD/")
clipr::dr_clipr()
q()
install.packages(c("arrow", "askpass", "classInt", "credentials", "dplyr", "duckdb", "knitr", "labeling", "leafem", "leaflet", "lidR", "mvtnorm", "openssl", "packrat", "pkgload", "prettyunits", "RcppArmadillo", "rematch", "renv", "rmarkdown", "rsconnect", "spatstat.explore", "spatstat.geom", "spatstat.model", "spatstat.random", "stars", "terra", "tmap", "units", "wk"))
source("INSTALL_MY_PACKAGES.R")
keyboardShortcutAddin:::list_files_pwd()
clipr::dr_clipr()
q()
source("INSTALL_MY_PACKAGES.R")
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::cd_to_sub()
cd("./Apps/draft/")
dir_delete("someD/")
rhino::init('someD')
keyboardShortcutAddin:::list_files_pwd()
install_my_packages_inside_rhino("someD/")
q()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::cd_to_sub()
cd("./Apps/draft/")
install_my_packages_inside_rhino('someD/')
purrr::walk(fs::dir_ls("~/my_packages/"), ~ renv::install(.))
renv::status()
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
q()
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
q()
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
system("echo $DISPLAY")
system("echo qwer | xclip -sel clip")
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
system("echo nonsense | xclip -sel clip")
q()
clipr::dr_clipr()
system("echo nonsense | xclip -sel clip")
clipr::dr_clipr()
clipr::dr_clipr()
q()
clipr::write_clip("asdf")
clipr::dr_clipr()
q()
clipr::dr_clipr()
clipr::dr_clipr()
source('INSTALL_MY_PACKAGES.R')
install.packages(c("dbplyr", "lubridate", "polyclip"))
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::cd_to_sub()
cd("./Apps/draft/")
dir_delete('someD/')
rhino::init('someD')
getwd()
keyboardShortcutAddin:::list_files_pwd()
install_my_packages_inside_rhino('someD/')
purrr::walk(fs::dir_ls("~/my_packages/"), ~ renv::install(.))
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./dbConnect/")
renv::status()
renv::restore()
renv::status()
shiny::runApp()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::cd_to_parent_dir()
setwd('..')
install_my_packages_inside_rhino('dbConnect/')
purrr::walk(fs::dir_ls("~/my_packages/"), ~ renv::install(.))
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::cd_to_parent_dir()
proj_add("dbConnect/")
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
file.edit('./.Rprofile')
keyboardShortcutAddin:::cd_to_parent_dir()
setwd('.')
setwd('..')
install_my_packages_inside_rhino('dilavo/')
system("echo nonsense | xclip -sel clip")
setwd('..')
system("echo nonsense | xclip -sel clip")
install_my_packages_inside_rhino('dilavo/')
purrr::walk(fs::dir_ls("~/my_packages/"), ~ renv::install(.))
keyboardShortcutAddin:::list_files_pwd()
renv::status()
renv::restore()
renv::status()
edit_file('~/my_packages/consoleR/R/use_rhino_dockerfile.R')
dir_create('~/my_packages/consoleR/ressource/')
file.copy("../draft/dbConnect/Dockerfile", "~/my_packages/consoleR/ressource/")
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::build_a_project()
keyboardShortcutAddin:::cd_to_sub()
cd("./draft/dbConnect/")
keyboardShortcutAddin:::cd_to_parent_dir()
dir_delete('someD/')
rhino::init('someD')
install_my_packages_inside_rhino('someD')
purrr::walk(fs::dir_ls("~/my_packages/"), ~ renv::install(.))
keyboardShortcutAddin:::list_files_pwd()
use_rhino_dockerfile()
keyboardShortcutAddin:::build_a_project()
renv::update()
use_rhino_dockerfile()
renv::status()
renv::install('~/my_packages/consoleR/')
renv::status()
use_rhino_dockerfile()
renv::install('~/my_packages/consoleR/')
use_rhino_dockerfile()
keyboardShortcutAddin:::build_a_project()
renv::install('~/my_packages/consoleR/')
use_rhino_dockerfile()
keyboardShortcutAddin:::build_a_project()
renv::install('~/my_packages/consoleR/')
use_rhino_dockerfile()
use_rhino_dockerfile()
keyboardShortcutAddin:::build_a_project()
renv::install('~/my_packages/consoleR/')
use_rhino_dockerfile()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::list_sub_dir()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::list_sub_dir()
keyboardShortcutAddin:::build_a_project()
renv::install('~/my_packages/consoleR/')
use_rhino_dockerfile()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
path_package("stats")
path_package("stats", letters)
path_package("stats")
dir_ls(path.package("stats"))
path_package("stats", c("INDEX", "NAMESPACE"))
file.copy("draft/dbConnect/.dockerignore", "~/my_packages/consoleR/inst/extdata/rhino/")
dir_create("~/my_packages/consoleR/inst/extdata/rhino")
file.copy("draft/dbConnect/.dockerignore", "~/my_packages/consoleR/inst/extdata/rhino/")
file_delete('~/my_packages/consoleR/inst/extdata/rhino_dockerfile')
file.copy("draft/dbConnect/Dockerfile", "~/my_packages/consoleR/inst/extdata/rhino/")
keyboardShortcutAddin:::build_a_project()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::cd_to_sub()
cd("./draft/someD/")
use_rhino_dockerfile()
keyboardShortcutAddin:::build_a_project()
renv::install('~/my_packages/consoleR/')
use_rhino_dockerfile()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::switch_between_projects()
proj_remove()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::list_files_pwd()
edit_file("app.R")
keyboardShortcutAddin:::cd_to_sub()
edit_file("app/logic/db_utils.R")
ls
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./draft/dbConnect/")
shiny::runApp()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./dilavo/")
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::switch_between_projects()
edit_file("app/main.R")
rhino::pkg_install('shiny.router')
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./dilavo/")
edit_file("app/main.R")
keyboardShortcutAddin:::switch_between_projects()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp(launch.browser = T)
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::switch_between_projects()
edit_file("app.R")
rhino::app
shiny::runApp()
shiny::runApp()
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
shiny::runApp(launch.browser = T)
edit_file("~/.Rprofile")
dir_ls("tests/interactive/", regexp = "*.R")
(
"tests/interactive/"
|> dir_ls(regexp = "*.R")
|> stringr::str_remove("tests/interactive")
|> stringr::str_remove("\\.R")
)
q()

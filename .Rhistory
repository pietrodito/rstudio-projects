error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year()
db()
most_recent_year()
most_recent_year
microbenchmark(other_year(), most_recent_year(), times = 100)
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(), times = 100)
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
db(nature())
build_package("")
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb, overwrite = TRUE)
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
nature()
get(suffixe(nautre())
get(suffixe(nautre()))
get(suffixe(nature()))
get(suffixe(nature()))()
build_package("")
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb, overwrite = TRUE)
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
db
microbenchmark(get(suffixe(nature())))
microbenchmark(get(suffixe(nature())))
microbenchmark(get(suffixe(nature()))())
microbenchmark(mco_dgf())
microbenchmark(get(suffixe(nature())), mco_dgf())
microbenchmark(get(suffixe(nature())), mco_dgf())
microbenchmark(get(suffixe(nature())) |> tbl("tdb"), mco_dgf() |> tbl("tdb"))
get(suffixe(nature()))
get(suffixe(nature()))()
microbenchmark(get(suffixe(nature()))() |> tbl("tdb"), mco_dgf() |> tbl("tdb"))
microbenchmark(db(nature()), mco_dgf())
microbenchmark(db(nature()) |> tbl("tdb"), mco_dgf() |> tbl("tdb"))
microbenchmark(db(nature()) |> tbl("tdb") |> collect(),
mco_dgf()    |> tbl("tdb") |> collect())
microbenchmark(db(nature()) |> tbl("tdb") |> summarise(X = max(annee)) |> collect(),
mco_dgf()    |> tbl("tdb") |> summarise(X = max(annee)) |> collect())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(db(nature()),
mco_dgf()   )
microbenchmark(db(nature()),
mco_dgf()   )
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
dbGetQuery(mco_dgf(), query)
}
my_hospitals()
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 10)
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
load_all()
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
load_all()
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(db(nature()))
microbenchmark(get(suffixe(nature))())
microbenchmark(get(suffixe(nature()))())
microbenchmark(  box::use(
../../app/logic/nature_utils
[ suffixe,],
))
file.edit("R/nature.R")
getwd()
file.edit("../../app/logic/nature_utils.R")
keyboardShortcutAddin:::switch_between_projects()
use_package("glue")
use_package("dplyr")
build_package("")
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb, overwrite = TRUE)
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
use_package(DBI)
use_package('DBI')
load_all()
most_recent_period()
most_recent_period(nature())
most_recent_year(nature())
most_recent_year(nature()) |> microbenchmark()
tryCatch(asdf())
tryCatch({asdf()})
tryCatch({asdf()}, error = "")
tryCatch({asdf()}, error = function() {})
tryCatch({asdf()}, error = function(cond) {})
load_all()
most_recent_period()
load_all()
most_recent_period()
load_all()
most_recent_period()
nature
most_recent_period(nature())
nature
query
db_query(nature, query)
build_package("")
load_all()
most_recent_period(nature())
most_recent_year()
most_recent_year(nature())
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
dbGetQuery(mco_dgf(), query)
}
my_hospitals()
load_all()
hospitals()
hospitals(nature())
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 10)
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 100)
load_all()
hospitals(nature())
load_all()
hospitals(nature())
load_all()
hospitals(nature())
load_all()
hospitals(nature())
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
db_query(nature, query)
}
my_hospitals()
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 10)
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb, overwrite = TRUE)
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(db(nature()),
mco_dgf()   )
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
db_query(nature, query)
}
my_hospitals()
my_hospitals()
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
db_query(draft, query)
}
my_hospitals()
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
draft <-  pool::dbPool(
drv = RPostgres::Postgres(),
dbname = 'draft',
host     = "localhost",
port     = "5432",
user     = "postgres",
password = "postgres"
)
draft
{
tdb <- mco_dgf() |> tbl("tdb") |> collect()
dbWriteTable(draft, "tdb", tdb, overwrite = TRUE)
}
other_year <- function() {
query <- "SELECT max(annee) AS year FROM tdb;"
year <- NULL
tryCatch(
{
year <- dbGetQuery(mco_dgf(), query)
},
error = function(cond) {}
)
if(is.null(year)) {return(NULL)}
year[1, 1]
}
other_year()
most_recent_year(nature())
microbenchmark(other_year(), most_recent_year(nature()), times = 100)
microbenchmark(db(nature()),
mco_dgf()   )
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
db_query(draft, query)
}
my_hospitals()
db_query
my_hospitals <- function() {
query <- glue(
'
SELECT hosp FROM(
SELECT DISTINCT ipe || \' - \' || "raison sociale" AS hosp
,                ipe
FROM tdb
WHERE annee = \'{other_year()}\'
ORDER BY ipe
)
;'
)
dbGetQuery(draft, query)
}
my_hospitals()
microbenchmark(my_hospitals(), ovaliDB::hospitals(nature()), times = 10)
load_all()
load_all()
load_all()
db_query(nature(), "awdf")
load_all()
db_query(nature(), "awdf")
load_all()
db_query(nature(), "awdf")
load_all()
db_execute(nature(), "awdf")
load_all()
most_recent_year()
most_recent_year(list(field="asdf", status="qwer"))
load_all()
most_recent_period()
most_recent_period(nature())
hospitals(nature())
all_natures |> map(hopsitals)
all_natures |> map(hospitals)
load_all()
all_natures |> map(hospitals)
load_all()
all_natures |> map(hospitals)
all_natures |> map(finess_rs)
load_all()
all_natures |> map(finess_rs)
finess_rs(nature())
finess_rs(nature()) |> map(extract_finess)
load_all()
load_all()
finess_rs(nature()) |> map(extract_rs)
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
}
finess_rs(nature()) |> map(extract_rs)
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
library(tidyverse)
}
{
box::use(../../app/logic/nature_utils [...])
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
library(tidyverse)
}
{
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
library(tidyverse)
}
finess_rs(nature()) |> map(extract_rs)
{
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
library(tidyverse)
}
load_all()
{
library(ovaliDB)
library(RPostgres)
library(DBI)
library(tidyverse)
library(microbenchmark)
library(glue)
library(tidyverse)
}
finess_rs(nature()) |> map(extract_rs)
load_all()
finess_rs(nature()) |> map(extract_rs)
load_all()
finess_rs(nature()) |> map(extract_rs)
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::switch_between_projects()

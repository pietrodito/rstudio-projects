enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
browser()
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
browser()
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::cd_to_sub()
{
load_all()
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed, {
req(input$table_row_selection_changed)
str(input$table_row_selection_changed)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::cd_to_sub()
cd("./JS_for_R/")
create("BidirectionalCommunication")
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::cd_to_sub()
cd("./BidirectionalCommunication/")

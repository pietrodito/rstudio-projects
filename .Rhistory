df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = row_number())
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names, "_", suffixe))
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = row_number())
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
# |> mutate(suffixe = replace_na(suffixe, ""))
# |> mutate(names = paste0(names, "_", suffixe))
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
read_csv("dup_col.csv")
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = row_number())
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names, "_", suffixe))
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = row_number())
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = replace_na(suffixe, ""))
# |> mutate(names = paste0(names, "_", suffixe))
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = row_number())
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.charcter(suffixe),
suffixe = replace_na(suffixe, ""))
# |> mutate(names = paste0(names, "_", suffixe))
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = row_number())
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
# |> mutate(names = paste0(names, "_", suffixe))
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = row_number())
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names, "_", suffixe))
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = paste0("_",row_number()))
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names,  suffixe))
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
read_csv("dup_col.csv")
(read_csv("dup_col.csv"))
(read_csv("dup_col.csv"))
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = paste0("_",row_number()))
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names,  suffixe))
)
}
(x <- read_csv("dup_col.csv"))
names(x) <- foo(x)
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = paste0("_",row_number()))
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names,  suffixe))
|> pull(names)
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
names(x) <- foo(x)
(x <- read_csv("dup_col.csv"))
names(x) <- foo(x)
names(x) <- foo(names(x))
x
(x <- read_csv("dup_col.csv"))
names(x) <- foo(names(x))
x
(x <- read_csv("dup_col.csv"))
colnames(x) <- foo(colnames(x))
x
colnames(x)
(x <- read_csv("dup_col.csv", name_repair = foo))
library(tidyverse)
foo <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = paste0("_",row_number()))
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names,  suffixe))
|> pull(names)
)
}
foo(c("asdf", "qwer", "asdf", "x", "y", "x", "y", "y"))
unique(c(3, 1, 5))
unique(c(3, 1, 5)) == c(3, 1, 5)
#' @export
name_repair <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = paste0("_",row_number()))
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names,  suffixe))
|> pull(names)
) -> names
if (unique(names) != names) {
name_repair(names)
} else {
names
}
}
read_csv("dup_col.csv", name_repair = name_repair)
#' @export
name_repair <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = paste0("_",row_number()))
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names,  suffixe))
|> pull(names)
) -> names
if (all(unique(names) == names)) {
names
} else {
name_repair(names)
}
}
#' @export
name_repair <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = paste0("_",row_number()))
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names,  suffixe))
|> pull(names)
) -> names
if (all(unique(names) == names)) {
names
} else {
name_repair(names)
}
}
read_csv("dup_col.csv", name_repair = name_repair)
read_csv("dup_col.csv", name_repair = name_repair)
#' @export
name_repair <- function(names) {
N <- length(names)
df <- cbind(
expand.grid(pos_first = 1:N, pos_dup = 1:N),
expand.grid(colX = names, colY = names)
)
df$one_way <- df$pos_first < df$pos_dup
df$dups <- df$colX == df$colY
df <- df[df$dups & df$one_way, 1:2]
dups <- unique(df$pos_dup)
(
df
|> filter( ! pos_first %in% dups)
|> group_by(pos_first)
|> mutate(suffixe = paste0("_",row_number()))
|> ungroup()
|> select(-1)
|> rename(pos = pos_dup)
|> right_join(tibble(pos = 1:N, names))
|> arrange(pos)
|> mutate(suffixe = as.character(suffixe),
suffixe = replace_na(suffixe, ""))
|> mutate(names = paste0(names,  suffixe))
|> pull(names)
) -> names
if (length(unique(names)) == length(names)) {
names
} else {
name_repair(names)
}
}
read_csv("dup_col.csv", name_repair = name_repair)
read_csv("dup_col.csv", name_repair = function(nm) make.unique(nm, sep = '_'))
?make.unique
make.unique
#' @export
name_repair <- function(nm) {
make.unique(nm, sep = "_")
}
read_csv("dup_col.csv", name_repair = function(nm) make.unique(nm, sep = '_'))
keyboardShortcutAddin:::switch_between_projects()
edit_file("app/logic/ovalide_utils.R")
q()
rhino::pkg_install("dplyr")
rhino::pkg_install("dplyr")
rhino::pkg_install("dplyr")
rhino::pkg_install("dplyr")
rhino::pkg_install("dplyr")
rhino::pkg_install("dplyr")
edit_file("dependencies.R")
edit_file("dependencies.R")
rhino::pkg_install("dplyr")
rhino::pkg_install(dplyr)
rhino::pkg_install(dplyr)
rhino::pkg_install(dplyr)
rhino::pkg_install("dplyr")
rhino::pkg_install("dbplyr")
rhino::pkg_install("dplyr")
rhino::pkg_remove("dplyr")
rhino::pkg_install("dplyr")
rhino::pkg_install("dplyr")
rhino::pkg_install("dplyr")
rhino::pkg_remove("dplyr")
system("ping www.goole.com")
system("ping www.goole.com")
rhino::pkg_install("dplyr")
rhino::pkg_install("dplyr")
rhino::pkg_install("dplyr")
keyboardShortcutAddin:::switch_between_projects()
setwd('..')
dir_delete('draft/pkg/')
keyboardShortcutAddin:::cd_to_sub()
cd("./draft/")
rhino::init('pkg')
keyboardShortcutAddin:::cd_to_sub()
cd("./pkg/")
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::cd_to_parent_dir()
setwd('..')
consoleR::install_my_packages_inside_rhino("pkg/")
clipr::write_clip('asdf')
system('echo $DISPLAY')
clipr::clear_clip()
clipr::read_clip()
clipr::write_clip("asdf")
clipr::dr_clipr()
system2(command = "id -u")
system2(command = "echo $USER")
system2(command = "echo", args = '$USER')
system2(command = "echo", args = '$DISPLAY')
clipr::dr_clipr()
getwd()
setwd('..')
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
clipr::dr_clipr()
keyboardShortcutAddin:::switch_between_projects()
q()
source("~/INSTALL_MY_PACKAGES.R", echo=TRUE)
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::switch_between_projects()
clipr::dr_clipr()
clipr::read_clip("~/.Rprofile")
clipr::write_clip("~/.Rprofile")
clipr::dr_clipr()
clipr::dr_clipr()
clipr::write_clip("~/.Rprofile")
rhino::pkg_install('dplyr')
edit_file("dependencies.R")
clipr::dr_clipr()
q()
clipr::dr_clipr()
clipr::dr_clipr()
q()

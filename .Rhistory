~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
library(tabulatorr)
}
async_example    <- function() {
minimal_shiny_ui_server_GlobalEnv()
ui <- shiny::fluidPage(
tabulatorOutput("table", async_selection = TRUE, height = NULL),
actionButton("debug", "DEBUG")
)
enrich_minimal_server <<- function(input) {
observeEvent(input$debug, {
browser()
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(async_example)
expr
tabulatorOutput
env
env$input
build_package("")
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
library(tabulatorr)
}
async_example    <- function() {
minimal_shiny_ui_server_GlobalEnv()
ui <- shiny::fluidPage(
tabulatorOutput("table", async_selection = TRUE, height = NULL),
actionButton("debug", "DEBUG")
)
enrich_minimal_server <<- function(input) {
observeEvent(input$debug, {
browser()
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(async_example)
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
library(tabulatorr)
}
async_example    <- function() {
minimal_shiny_ui_server_GlobalEnv()
ui <- shiny::fluidPage(
tabulatorOutput("table", async_selection = TRUE, height = NULL),
actionButton("debug", "DEBUG")
)
enrich_minimal_server <<- function(input) {
observeEvent(input$debug, {
browser()
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(async_example)
build_package("")
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
library(tabulatorr)
}
shiny_example    <- function() {
minimal_shiny_ui_server_GlobalEnv()
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(shiny_example)
cell_click_event <- function() {
enrich_minimal_server <<- function(input) {
observeEvent(input$table_cell_clicked, {
req(input$table_cell_clicked)
str(input$table_cell_clicked)
})
}
minimal_shiny_ui_server_GlobalEnv()
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(cell_click_event)
file.edit("tests/testthat/test-selector.R")
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
library(tabulatorr)
library(tabulatorr)
runApp('tests/testthat/test-selector.R')
runApp('tests/testthat/test-selector.R')
file.edit("R/selector.R")
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
shiny::runApp()
runApp('tests/testthat/test-selector.R')
runApp('tests/testthat/test-selector.R')
runApp('tests/testthat/test-selector.R')
build_package("")
shiny::runApp()
runApp('tests/testthat/test-selector.R')
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
build_package("")
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
build_package("")
build_package("")
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
runApp('tests/testthat/test-selector.R')
runApp('tests/testthat/test-selector.R')
runApp('tests/testthat/test-selector.R')
runApp('tests/testthat/test-selector.R')
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
build_package("")
keyboardShortcutAddin:::cd_to_parent_dir()
build_package("")
keyboardShortcutAddin:::cd_to_parent_dir()
build_package("")
build_package("")
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
library(tabulatorr)
}
simple_example          <- function() {
tabulator(mtcars, autoColumns = TRUE)
}; run(simple_example)
example_with_parameters <- function() {
tabulator(mtcars,
height = FALSE,
columns = list(
list(title = "MPG", field = "mpg"),
list(title = "CYL", field = "cyl")
))
}; run(example_with_parameters)
shiny_example    <- function() {
minimal_shiny_ui_server_GlobalEnv()
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(shiny_example)
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed_data, {
req(input$table_row_selection_changed_data)
str(input$table_row_selection_changed_data)
})
observeEvent(input$table_row_selection_changed_row_numbers, {
req(input$table_row_selection_changed_row_numbers)
str(input$table_row_selection_changed_row_numbers)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
runApp('tests/testthat/test-selector.R')
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed_data, {
req(input$table_row_selection_changed_data)
str(input$table_row_selection_changed_data)
})
observeEvent(input$table_row_selection_changed_row_numbers, {
req(input$table_row_selection_changed_row_numbers)
str(input$table_row_selection_changed_row_numbers)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
runApp('tests/testthat/test-selector.R')
runApp('tests/testthat/test-selector.R')
build_package("")
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
build_package("")
build_package("")
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
build_package("")
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
runApp('tests/testthat/test-selector.R')
build_package("")
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
library(tabulatorr)
}
detect_column_move <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
movableColumns = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_column_moved, {
req(input$table_column_moved)
str(input$table_column_moved)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(detect_column_move)
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed_data, {
req(input$table_row_selection_changed_data)
str(input$table_row_selection_changed_data)
})
observeEvent(input$table_row_selection_changed_row_numbers, {
req(input$table_row_selection_changed_row_numbers)
str(input$table_row_selection_changed_row_numbers)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
source("~/my_packages/tabulatorr/R/selector.R", echo=TRUE)
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
library(tabulatorr)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed_data, {
req(input$table_row_selection_changed_data)
str(input$table_row_selection_changed_data)
})
observeEvent(input$table_row_selection_changed_row_numbers, {
req(input$table_row_selection_changed_row_numbers)
str(input$table_row_selection_changed_row_numbers)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
build_package("")
{
library(shiny)
enrich_minimal_server             <- function(input) {
}
minimal_shiny_ui_server_GlobalEnv <- function() {
ui <<- shiny::fluidPage(
tabulatorOutput("table", height = NULL)
)
server <<- function(input, output, session) {
output$table <- renderTabulator({
tabulator(
tibble::tribble(
~ "This", ~ "is",  ~ "a", ~ "test",
1       , 2     ,  3    , 4,
5       , 6     ,  7    , 8
),
autoColumns = TRUE
)
})
enrich_minimal_server(input)
}
}
run <- function(fun) if(sys.nframe() == 1) do.call(fun, list())
options(viewer = NULL)
library(tabulatorr)
}
row_selection_changed <- function() {
ui <- fluidPage(
tabulatorOutput("table", height = NULL)
)
server <- function(input, output, session) {
output$table <- renderTabulator({
tabulator(mtcars,
layout = "fitColumns",
selectableRows = TRUE,
autoColumns = TRUE)
})
observeEvent(input$table_row_selection_changed_data, {
req(input$table_row_selection_changed_data)
str(input$table_row_selection_changed_data)
})
observeEvent(input$table_row_selection_changed_row_numbers, {
req(input$table_row_selection_changed_row_numbers)
str(input$table_row_selection_changed_row_numbers)
})
}
shinyApp(ui, server,
options = list(launch.browser = T))
}; run(row_selection_changed)
runApp('tests/testthat/test-selector.R')
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
build_package("")
library(shiny); runApp('tests/testthat/test-selector.R')
keyboardShortcutAddin:::switch_between_projects()
renv::update("tabulatorr")
renv::update("tabulatorr")
options(repos="http://cran.rstudio.com/")
Sys.setenv("RENV_CONFIG_REPOS_OVERRIDE" = "http://cran.rstudio.com")
renv::update("tabulatorr")
keyboardShortcutAddin:::switch_between_projects()
renv::update("tabulatorr")
renv::update("tabulatorr")
renv::update()
options(repos="http://cran.rstudio.com/")
Sys.setenv("RENV_CONFIG_REPOS_OVERRIDE" = "http://cran.rstudio.com")
renv::update()
options(repos="http://cran.rstudio.com/")
Sys.setenv("RENV_CONFIG_REPOS_OVERRIDE" = "http://cran.rstudio.com")
renv::update()
renv::snapshot()
shiny::runApp()
file.edit("tests/interactive/monthly_activity.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
keyboardShortcutAddin:::cd_to_sub()
cd("./Analyses/")
keyboardShortcutAddin:::cd_to_sub()
dir_create("OVALIDE_DB")
keyboardShortcutAddin:::cd_to_sub()
dir_delete("OVALIDE_DB/")
create_package("ovalidb")
proj_add()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
install.packages("odbc")

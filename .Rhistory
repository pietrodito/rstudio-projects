file.copy("../dilavo.bak.after.refactor.ovaliDB.package/README.md", ".")
keyboardShortcutAddin:::switch_between_projects()
file.edit("README.md")
read_csv2("0.13, 1, x")
library(readr)
read_csv2("0.13, 1, x")
read_csv2("0.13, 1, x")
?unzip
?setwd
old_wd <- setwd("ovalide_data/draft/")
setwd(old_wd))
setwd(old_wd)
old_wd <- setwd("ovalide_data/draft/")
unzip("mco.dgf.2022.11.ovalide-tables-as-csv.zip")
setwd(old_wd)
old_wd <- setwd("ovalide_data/draft/")
read_csv2("mco.dgf.2022.11.html_1.csv")
read_csv2("mco.dgf.2022.11.html_1.csv")
read_csv2("mco.dgf.2022.11.TDB.csv")
read_csv2("mco.dgf.2022.11.TDB.csv")
read_csv2("mco.dgf.2022.11.TDB.csv")
read_csv2("mco.dgf.2022.11.TDB.csv")
guess_encoding_and_read_file <- function() {
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
library(tidyverse)
library(readr)
library(tidyverse)
old_wd <- setwd("ovalide_data/draft/")
unzip("mco.dgf.2022.11.ovalide-tables-as-csv.zip")
guess_encoding_and_read_file <- function(filepath) {
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
guess_encoding_and_read_file <- function(filepath) {
name_repair <- function(nm) {
(empty <- nm == "")
(fill_empty <- paste0("empty_", seq_len(sum(empty))))
(nm[empty] <- fill_empty)
nm <- tolower(nm)
make.unique(nm, sep = "_")
}
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
guess_encoding_and_read_file <- function(filepath) {
name_repair <- function(nm) {
(empty <- nm == "")
(fill_empty <- paste0("empty_", seq_len(sum(empty))))
(nm[empty] <- fill_empty)
nm <- tolower(nm)
make.unique(nm, sep = "_")
}
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
data
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
read_csv2("mco.dgf.2022.11.html_1.csv")
library(readr)
library(tidyverse)
unzip("mco.dgf.2022.11.ovalide-tables-as-csv.zip")
guess_encoding_and_read_file <- function(filepath) {
name_repair <- function(nm) {
(empty <- nm == "")
(fill_empty <- paste0("empty_", seq_len(sum(empty))))
(nm[empty] <- fill_empty)
nm <- tolower(nm)
make.unique(nm, sep = "_")
}
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
data
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
?readr::cols()
cols()
cols(mtcars)
cols()
cols(mtcars)
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
guess_encoding_and_read_file <- function(filepath) {
name_repair <- function(nm) {
(empty <- nm == "")
(fill_empty <- paste0("empty_", seq_len(sum(empty))))
(nm[empty] <- fill_empty)
nm <- tolower(nm)
make.unique(nm, sep = "_")
}
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair
)
}
data
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
guess_encoding_and_read_file("mco.dgf.2022.11.TDB.csv")
install.packages("ada")
install.packages("bartMachine")
ls
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.11.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("had.dgf.2022.12.t1q11cgrcg_1.csv")
guess_encoding_and_read_file("had.dgf.2022.12.t1q11cgrcg_1.csv")
guess_encoding_and_read_file("had.dgf.2022.11.t1q11cgrcg_1.csv")
m11 <- guess_encoding_and_read_file("had.dgf.2022.11.t1q11cgrcg_1.csv")
m12 <- guess_encoding_and_read_file("had.dgf.2022.12.t1q11cgrcg_1.csv")
names(m11)
identical(
names(m11),
names(m12))
bind_rows(m11, m12)
m11
m12
m11
(
m11
|> lapply(class)
)
install.packages('waldo')
waldo::compare(m11, m12)
file.edit("../../db_updater/draft/nmeric_column_detection.R")
col_types <- function(df) { lapply(df, class) }
col_types(m11)
waldo::compare(col_types(m11), col_types(m12))
waldo::compare(col_types(m11), col_types(m12))
x <- waldo::compare(col_types(m11), col_types(m12))
(x <- waldo::compare(col_types(m11), col_types(m12)))
x
str(x)
(x <- waldo::compare(col_types(m11), col_types(m12)))
str(x)
names(m11)
library(stringr)
purrr::map(names(m11), ~ str_detect(x, .))
purrr::map_lgl(names(m11), ~ str_detect(x, .))
which_cols <- purrr::map_lgl(names(m11), ~ str_detect(x, .))
names(x)[which_cols]
which_cols <- purrr::map_lgl(names(m11), ~ str_detect(x, .))
(which_cols <- purrr::map_lgl(names(m11), ~ str_detect(x, .)))
names(x)
names(m11)[which_cols]
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./Misc/")
keyboardShortcutAddin:::cd_to_sub()
cd("./")
keyboardShortcutAddin:::cd_to_sub()
cd("./CoQ Clock/")
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
init_plot <- function() {
plot(
x = c(-1, 1),
y = c(-1, 1),
asp = 1,
type = "n",
axes = FALSE,
xlab = "",
ylab = ""
)
}
nb_of_ticks <- 1200L
period_cols <- c(
BMZ = "#0F3B3A",
BM  = "#155352",
TS  = "#DA5BD6",
HD  = "#40A4B9",
WxSS = "#77BFCF",
HSS = "#CFC041",
WnSS = "#E99F10",
HS  = "#F15F22",
JD  = "#B154CF"
)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
install.packages("plotrix")
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
install.package("sysfonts")
install.packages("sysfonts")
sysfonts::font_add_google("Source Sans Pro")
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
init_plot()
text(0, -1.6, "Caves of Qud day segments", cex = 1.5,
family = "Source Sans Pro")
text(0, -0.6, "Caves of Qud day segments", cex = 1.5)
text(0, -1.6, "Caves of Qud day segments", cex = 1.5,
family = "serif")
sysfonts::font_add_google("Source Code Pro")
text(0, -1.6, "Caves of Qud day segments", cex = 1.5,
family = "Source Code Pro")
sysfonts::font_add_google("Source Code Pro")
text(0, -1.6, "Caves of Qud day segments", cex = 1.5,
family = "Source Code Pro")
init_plot()
text(0, -0.6, "Caves of Qud day segments", cex = 1.5)
text(0, -1.6, "Caves of Qud day segments", cex = 1.5,
family = "Source Code Pro")
library(showtext)
font_add_google('Source Code Pro')
install.packages("showtext")
font_add_google('Source Code Pro')
library(showtext)
font_add_google('Source Code Pro')
showtext_begin()
ggsomething() + theme(text = element_text(family='Source Code Pro'))
library(showtext)
font_add_google('Source Code Pro')
showtext_begin()
ggsomething() + theme(text = element_text(family='Source Code Pro'))
svglite::svglite("test.svg")
showtext_begin()
library(showtext)
svglite::svglite("test.svg")
showtext_begin()
text(0, 0, "I am real pro !", family='Source Code Pro')
plot()
plot(0, 0)
text(0, 0, "I am real pro !", family='Source Code Pro')
plot(c(-10, 10), c(-10, 10))
text(0, 0, "I am real pro !", family='Source Code Pro')
text(0, 0, "I am real pro !")#, family='Source Code Pro')
plot(c(-10, 10), c(-10, 10))
text(0, 0, "I am real pro !")#, family='Source Code Pro')
plot(x = c(-10, 10), y = c(-10, 10))
showtext_end()
dev.off()
svglite::svglite("test.svg")
showtext_begin()
plot(x = c(-10, 10), y = c(-10, 10))
text(0, 0, "I am real pro !")#, family='Source Code Pro')
showtext_end()
dev.off()
svglite::svglite("test.svg")
showtext_begin()
plot(x = c(-10, 10), y = c(-10, 10))
text(0, 0, "I am real pro !", family='Source Code Pro')
showtext_end()
dev.off()
svglite::svglite("test.svg")
showtext_begin()
plot(x = c(-10, 10), y = c(-10, 10))
text(0, 0, "Whereas disregard and contempt for human rights have resulted", family='Source Code Pro')
showtext_end()
dev.off()
svglite::svglite("coq_clock.svg")
showtext_begin()
init_plot <- function() {
plot(
x = c(-1.4, 1.4),
y = c(-1.6, 1.6),
asp = 1,
type = "n",
axes = FALSE,
xlab = "",
ylab = ""
)
}
nb_of_ticks <- 1200L
period_cols <- c(
BMZ = "#0F3B3A",
BM  = "#155352",
TS  = "#DA5BD6",
HD  = "#40A4B9",
WxSS = "#77BFCF",
HSS = "#CFC041",
WnSS = "#E99F10",
HS  = "#F15F22",
JD  = "#B154CF"
)
draw_clock <- function(circle_precision = 100) {
period_duration <- 150L
(nb_of_periods <- nb_of_ticks / period_duration)
(period_ticks <- period_duration * seq_len(nb_of_periods))
points(0, 0, lwd = 5, pch = 19)
(
period_ticks
|> purrr::walk(function(tick) {
lines(c(cos(2*pi*tick/nb_of_ticks), cos(2*pi*tick/nb_of_ticks)*0.9)
,c(sin(2*pi*tick/nb_of_ticks), sin(2*pi*tick/nb_of_ticks)*0.9),
lwd = 5,
col = "white")
})
)
radius = 1
center_x = 0
center_y = 0
theta = seq(0, 2*pi, length = circle_precision)
lines(
center_x + radius*cos(theta),
center_y + radius*sin(theta),
lwd = 5
)
invisible()
}
draw_pizza_slice <- function(start_tick, end_tick, color, circle_precision = 10) {
start_tick <- - start_tick + 300
end_tick <- - end_tick + 300
theta <- seq(2*pi*start_tick/nb_of_ticks,
2*pi*end_tick/nb_of_ticks, length = circle_precision)
point_xs <- c(0, cos(theta), 0)
point_ys <- c(0, sin(theta), 0)
polygon(point_xs, point_ys, col = color, border = color)
}
draw_pizza_gradient <- function(start_tick, end_tick, start_color, end_color,
gradient_precision = 80) {
colors <- colorRampPalette(c(start_color, end_color))(gradient_precision)
gradients <- seq(start_tick, end_tick, length = gradient_precision + 1)
start_ticks <- head(gradients, -1)
end_ticks <- tail(gradients, -1)
purrr::pwalk(list(start_ticks, end_ticks, colors), draw_pizza_slice)
}
draw_labels <- function() {
plotrix::textbox(c(-0.5, 0.5), 1.4,  "Beetle Moon Zenith",
col = "white", margin = 0.05,
justify = "c",  fill = period_cols["BMZ"])
plotrix::textbox(c(-1.2, -0.55), 1.1, "Waxing",
col = "white", margin = 0.05,
justify = "c",  fill = period_cols["BM"])
plotrix::textbox(c(0.55, 1.2), 1.1, "Waning",
col = "white", margin = 0.05,
justify = "c",  fill = period_cols["BM"])
plotrix::textbox(c(1.1, 1.7), 0.65, "The Shallows",
col = "white", margin = 0.05,
justify = "c",  fill = period_cols["TS"])
plotrix::textbox(c(1.1, 1.7), -0.3, "Harvest Dawn",
col = "black", margin = 0.05,
justify = "c",  fill = period_cols["HD"])
plotrix::textbox(c(0.5, 1.1), -0.95, "Waxing",
col = "black", margin = 0.05,
justify = "c",  fill = period_cols["WxSS"])
plotrix::textbox(c(-0.4, 0.4), -1.2, "High Salt Sun",
col = "black", margin = 0.05,
justify = "c",  fill = period_cols["HSS"])
plotrix::textbox(c(-1.1, -0.5), -0.95, "Waning",
col = "black", margin = 0.05,
justify = "c",  fill = period_cols["WnSS"])
plotrix::textbox(c(-1.7, -1.1), -0.3, "Hindsun",
col = "black", margin = 0.05,
justify = "c",  fill = period_cols["HS"])
plotrix::textbox(c(-1.7, -1.1), 0.65, "Jeweled Dusk",
col = "white", margin = 0.05,
justify = "c",  fill = period_cols["JD"])
}
draw_colors <- function() {
draw_pizza_gradient(975, 1125, period_cols["JD"], period_cols["BM"])
draw_pizza_gradient(1125, 1200, period_cols["BM"], period_cols["BMZ"])
draw_pizza_gradient(0, 75, period_cols["BMZ"], period_cols["BM"])
draw_pizza_gradient(75, 225, period_cols["BM"], period_cols["TS"])
draw_pizza_gradient(225, 375, period_cols["TS"], period_cols["HD"])
draw_pizza_gradient(375, 525, period_cols["HD"], period_cols["WxSS"])
draw_pizza_gradient(525, 600, period_cols["WxSS"], period_cols["HSS"])
draw_pizza_gradient(600, 675, period_cols["HSS"], period_cols["WnSS"])
draw_pizza_gradient(675, 825, period_cols["WnSS"], period_cols["HS"])
draw_pizza_gradient(825, 975, period_cols["HS"], period_cols["JD"])
}
init_plot()
text(0, -0.6, "Caves of Qud day segments", cex = 1.5)
text(0, -1.6, "Caves of Qud day segments", cex = 1.5,
family = "Source Code Pro")
showtext_end()
dev.off()
svglite::svglite("test.svg")
showtext_begin()
plot(x = c(-10, 10), y = c(-10, 10))
text(1, 1, "Whereas disregard and contempt for human rights have resulted")
text(0, 0, "Whereas disregard and contempt for human rights have resulted", family='Source Code Pro')
showtext_end()
dev.off()
X11Font()
X11Fonts()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::list_files_pwd()
keyboardShortcutAddin:::switch_between_projects()
keyboardShortcutAddin:::list_files_pwd()
shiny::runApp()
keyboardShortcutAddin:::list_files_pwd()
file.edit("db_updater/probe_dir.R")
file.edit("db_updater/db_updater_utils.R")
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./draft/")
fs::dir_create("debug_db_updater")
keyboardShortcutAddin:::cd_to_sub()
cd("./debug_db_updater/")
keyboardShortcutAddin:::list_files_pwd()
library(readr)
read_csv("had.dgf.2022.11.t1q11cgrcg_1.csv")
read_csv2("had.dgf.2022.11.t1q11cgrcg_1.csv")
read_csv2("had.dgf.2022.12.t1q11cgrcg_1.csv")
keyboardShortcutAddin:::switch_between_projects()
file.edit("db_updater/db_updater_utils.R")

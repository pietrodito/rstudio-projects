y <- log_formatter(x)
log_info(head(iris))
library(logger)
library(tibble)
log_info(head(iris))
(x <- log_formatter())
library(logger)
library(tibble)
log_info(head(iris))
library(logger)
library(tibble)
log_info(head(iris))
(x <- log_formatter())
log_formatter(formatter_pander)
log_info(head(iris))
log_formatter(x)
log_info(head(iris))
(z <- log_formatter(formatter_pander))
browser()
library(tidyvers)
library(tidyverse)
mtcars |> select(-mpg)
mtcars |> select(-mpg, -hg)
mtcars |> select(-mpg, -hp)
mtcars |> select(-mpg, -hp, -cyl)
cols(mtcars)
names(mtcars)
library(tidyverse)
library(tidyverse)
(cols <- names(mtcars))
mtcars |> arrange(all_of(cols))
mtcars |> arrange(pick(all_of(cols)))
logger::log_error('asdf')
mtcars$xxx
?file.remove
cat("file A\n", file = "A")
file.remove("A")
file.remove("A")
cat("file A\n", file = "A")
file.remove("A")
list.files("~")
log_error("DUPLICATES: ", list.files("~"))
logger::log_error("DUPLICATES: ", list.files("~"))
logger::log_error("DUPLICATES: ", list.files("~") |> paste())
list.files("~") |> paste()
logger::log_error("DUPLICATES: ", list.files("~") |> paste(collapse = " "))
file.create(".probe.lock")
list.files()
file.create("probe.lock")
list.files()
file.remove(".probe.lock")
file.remove("probe.lock")
list.files()
install.packages('pander')
keyboardShortcutAddin:::cd_to_sub()
library(ovaliDB)
file.edit("packages/ovaliDB/R/utils.R")
file.edit("db_updater/dispatcher.R")
box::use(
logger
[ ... ],
./db_updater_utils
[ dispatch_uploaded_file, pick_file_in_dir, ],
)
filepath <- NULL
while(TRUE) {
filepath <- pick_file_in_dir("/ovalide_data/upload/")
if(is.null(filepath)) {  Sys.sleep(.3); next }
dispatch_uploaded_file(filepath)
}
box::use(
logger
[ ... ],
./db_updater_utils
[ dispatch_uploaded_file, pick_file_in_dir, ],
)
mtcars$zzz
tibble(mtcars)
tibble(mtcars)$xxx
suppressWarnings(  tibble(mtcars)$xxx   )
keyboardShortcutAddin:::cd_to_sub()
cd("./packages/ovaliDB/")
load_all()
check_all_uploads()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
source('packages/source_me_to_update_packages_in_app.R')
source('packages/source_me_to_update_packages_in_app.R')
source('packages/source_me_to_update_packages_in_app.R')
source('packages/source_me_to_update_packages_in_app.R')
file.edit("packages/ovaliDB/R/aaa.R")
file.edit("packages/ovaliDB/R/utils.R")
keyboardShortcutAddin:::cd_to_sub()
cd("./packages/ovaliDB/")
load_all()
most_recent_year(nature())
file.edit("draft/draft.R")
.rs.restartR()
library(tidyverse)
library(microbenchmark)
.rs.restartR()
library(tidyverse)
.rs.restartR()
library(tidyverse)
library(microbenchmark)
.rs.restartR()
library(tidyverse)
library(microbenchmark)
.rs.restartR()
load_all()
.rs.restartR()
load_all()
most_recent_year(nature())
microbenchmark(most_recent_year(nature()))
microbenchmark(most_recent_year(nature()), n = 1000)
microbenchmark(most_recent_year(nature()), times = 1000)
db
microbenchmark(db())
microbenchmark(db(nature()))
db(nature())
microbenchmark(db(nature()))
microbenchmark(most_recent_year(nature()))
most_recent_year
db_query
foo <- function() {
DBI::dbGetQuery(db(nature(), "SELECT max(annee) AS year FROM tdb;"))
}
microbenchmark(foo())
foo <- function() {
DBI::dbGetQuery(db(nature()), "SELECT max(annee) AS year FROM tdb;")
}
microbenchmark(foo())
microbenchmark(most_recent_year(nature()))
microbenchmark(foo(), most_recent_year(nature()))
most_recent_year
microbenchmark(foo(), most_recent_year(nature()))
microbenchmark(most_recent_period(nature()), most_recent_year(nature()))
foo <- function() {
DBI::dbGetQuery(db(nature()), "
SELECT max(periode) AS period FROM tdb
HAVING annee = MAX(annee)';
")
}
foo <- function() {
DBI::dbGetQuery(db(nature()), "
SELECT max(periode) AS period FROM tdb
HAVING annee = MAX(annee)';
")
}
microbenchmark(most_recent_period(nature()), foo)
microbenchmark(most_recent_period(nature()), foo())
foo <- function() {
DBI::dbGetQuery(db(nature()), "
SELECT max(periode) AS period FROM tdb
HAVING annee = MAX(annee);
")
}
microbenchmark(most_recent_period(nature()), foo())
foo <- function() {
DBI::dbGetQuery(db(nature()), "
SELECT max(periode) AS period FROM tdb
GROUP BY annee
HAVING annee = MAX(annee);
")
}
microbenchmark(most_recent_period(nature()), foo())
(
db(nature)
|> tbl("tdb")
)
(
db(nature())
|> tbl("tdb")
)
(
db(nature())
|> tbl("tdb")
|> filter(annee = max(annee))
)
(
db(nature())
|> tbl("tdb")
|> filter(annee == max(annee))
)
(
db(nature())
|> tbl("tdb")
|> filter(annee == max(annee))
|> summarise(x = max(periode))
)
boo <- function() {
(
db(nature())
|> tbl("tdb")
|> filter(annee == max(annee))
|> summarise(x = max(periode))
)
}
microbenchmark(most_recent_period(nature()), foo(), boo())
foo <- function() {
DBI::dbGetQuery(db(nature()), "
SELECT max(periode) AS period FROM tdb
GROUP BY annee
HAVING annee = MAX(annee);
")
}
foo()
foo <- function() {
DBI::dbGetQuery(db(nature()), "
SELECT annee, max(periode) AS period FROM tdb
GROUP BY annee;
")
}
foo()
(
db(nature())
|> tbl("tdb")
|> group_by(annee)
|> summarise(x = max(periode))
)
(
db(nature())
|> tbl("tdb")
|> count(annee, periode)
)
(
db(nature())
|> tbl("tdb")
|> select(annee, periode)
|> arrange(annee, periode)
)
(
db(nature())
|> tbl("tdb")
|> select(annee, periode)
|> arrange(annee, periode)
|> unique()
)
(
db(nature())
|> tbl("tdb")
|> select(annee, periode)
|> arrange(annee, periode)
|> distinct()
)
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
file.copy("../dilavo.bak.after.refactor.ovaliDB.package/README.md", ".")
keyboardShortcutAddin:::switch_between_projects()
file.edit("README.md")
read_csv2("0.13, 1, x")
library(readr)
read_csv2("0.13, 1, x")
read_csv2("0.13, 1, x")
?unzip
?setwd
old_wd <- setwd("ovalide_data/draft/")
setwd(old_wd))
setwd(old_wd)
old_wd <- setwd("ovalide_data/draft/")
unzip("mco.dgf.2022.11.ovalide-tables-as-csv.zip")
setwd(old_wd)
old_wd <- setwd("ovalide_data/draft/")
read_csv2("mco.dgf.2022.11.html_1.csv")
read_csv2("mco.dgf.2022.11.html_1.csv")
read_csv2("mco.dgf.2022.11.TDB.csv")
read_csv2("mco.dgf.2022.11.TDB.csv")
read_csv2("mco.dgf.2022.11.TDB.csv")
read_csv2("mco.dgf.2022.11.TDB.csv")
guess_encoding_and_read_file <- function() {
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
library(tidyverse)
library(readr)
library(tidyverse)
old_wd <- setwd("ovalide_data/draft/")
unzip("mco.dgf.2022.11.ovalide-tables-as-csv.zip")
guess_encoding_and_read_file <- function(filepath) {
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
guess_encoding_and_read_file <- function(filepath) {
name_repair <- function(nm) {
(empty <- nm == "")
(fill_empty <- paste0("empty_", seq_len(sum(empty))))
(nm[empty] <- fill_empty)
nm <- tolower(nm)
make.unique(nm, sep = "_")
}
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
guess_encoding_and_read_file <- function(filepath) {
name_repair <- function(nm) {
(empty <- nm == "")
(fill_empty <- paste0("empty_", seq_len(sum(empty))))
(nm[empty] <- fill_empty)
nm <- tolower(nm)
make.unique(nm, sep = "_")
}
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
data
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
read_csv2("mco.dgf.2022.11.html_1.csv")
library(readr)
library(tidyverse)
unzip("mco.dgf.2022.11.ovalide-tables-as-csv.zip")
guess_encoding_and_read_file <- function(filepath) {
name_repair <- function(nm) {
(empty <- nm == "")
(fill_empty <- paste0("empty_", seq_len(sum(empty))))
(nm[empty] <- fill_empty)
nm <- tolower(nm)
make.unique(nm, sep = "_")
}
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair,
col_types = cols()
)
}
data
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
?readr::cols()
cols()
cols(mtcars)
cols()
cols(mtcars)
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
guess_encoding_and_read_file <- function(filepath) {
name_repair <- function(nm) {
(empty <- nm == "")
(fill_empty <- paste0("empty_", seq_len(sum(empty))))
(nm[empty] <- fill_empty)
nm <- tolower(nm)
make.unique(nm, sep = "_")
}
if(file.size(filepath) > 0) {
(
filepath
|> guess_encoding(threshold = 0)
|> filter(row_number() == 1)
|> pull(encoding)
) -> encoding
data <- read_delim(
filepath,
delim = ";",
locale = locale(encoding = encoding),
name_repair = name_repair
)
}
data
}
guess_encoding_and_read_file("mco.dgf.2022.11.html_1.csv")
guess_encoding_and_read_file("mco.dgf.2022.11.TDB.csv")
install.packages("ada")
install.packages("bartMachine")
ls
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.11.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("mco.dgf.2022.12.ovalide-tables-as-csv.zip")
unzip("had.dgf.2022.12.t1q11cgrcg_1.csv")
guess_encoding_and_read_file("had.dgf.2022.12.t1q11cgrcg_1.csv")
guess_encoding_and_read_file("had.dgf.2022.11.t1q11cgrcg_1.csv")
m11 <- guess_encoding_and_read_file("had.dgf.2022.11.t1q11cgrcg_1.csv")
m12 <- guess_encoding_and_read_file("had.dgf.2022.12.t1q11cgrcg_1.csv")
names(m11)
identical(
names(m11),
names(m12))
bind_rows(m11, m12)
m11
m12
m11
(
m11
|> lapply(class)
)
install.packages('waldo')
waldo::compare(m11, m12)
file.edit("../../db_updater/draft/nmeric_column_detection.R")
col_types <- function(df) { lapply(df, class) }
col_types(m11)
waldo::compare(col_types(m11), col_types(m12))
waldo::compare(col_types(m11), col_types(m12))
x <- waldo::compare(col_types(m11), col_types(m12))
(x <- waldo::compare(col_types(m11), col_types(m12)))
x
str(x)
(x <- waldo::compare(col_types(m11), col_types(m12)))
str(x)
names(m11)
library(stringr)
purrr::map(names(m11), ~ str_detect(x, .))
purrr::map_lgl(names(m11), ~ str_detect(x, .))
which_cols <- purrr::map_lgl(names(m11), ~ str_detect(x, .))
names(x)[which_cols]
which_cols <- purrr::map_lgl(names(m11), ~ str_detect(x, .))
(which_cols <- purrr::map_lgl(names(m11), ~ str_detect(x, .)))
names(x)
names(m11)[which_cols]
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_parent_dir()
keyboardShortcutAddin:::cd_to_sub()
cd("./Misc/")
keyboardShortcutAddin:::cd_to_sub()
cd("./")
keyboardShortcutAddin:::cd_to_sub()
cd("./CoQ Clock/")
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
init_plot <- function() {
plot(
x = c(-1, 1),
y = c(-1, 1),
asp = 1,
type = "n",
axes = FALSE,
xlab = "",
ylab = ""
)
}
nb_of_ticks <- 1200L
period_cols <- c(
BMZ = "#0F3B3A",
BM  = "#155352",
TS  = "#DA5BD6",
HD  = "#40A4B9",
WxSS = "#77BFCF",
HSS = "#CFC041",
WnSS = "#E99F10",
HS  = "#F15F22",
JD  = "#B154CF"
)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
source("~/Misc/CoQ Clock/drawing.R", echo=TRUE)
install.packages("plotrix")
